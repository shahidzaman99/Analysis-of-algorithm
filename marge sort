import time

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2  # Middle index
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        # Merge two halves
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        # Check if any element was left
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

if __name__ == "__main__":
    # Arrays
    arr1 = [i for i in range(1, 6)]        # 1 to 5
    arr2 = [i for i in range(1, 11)]        # 1 to 10
    arr3 = [i for i in range(1, 51)]        # 1 to 50
    arr4 = [i for i in range(1, 101)]       # 1 to 100

    # Sort arr1
    arr_copy = arr1.copy()
    start_time = time.time()
    merge_sort(arr_copy)
    end_time = time.time()
    print(f"Merge Sort (1 to 5) execution time: {(end_time - start_time) * 1000:.6f} ms")

    # Sort arr2
    arr_copy = arr2.copy()
    start_time = time.time()
    merge_sort(arr_copy)
    end_time = time.time()
    print(f"Merge Sort (1 to 10) execution time: {(end_time - start_time) * 1000:.6f} ms")

    # Sort arr3
    arr_copy = arr3.copy()
    start_time = time.time()
    merge_sort(arr_copy)
    end_time = time.time()
    print(f"Merge Sort (1 to 50) execution time: {(end_time - start_time) * 1000:.6f} ms")

    # Sort arr4
    arr_copy = arr4.copy()
    start_time = time.time()
    merge_sort(arr_copy)
    end_time = time.time()
    print(f"Merge Sort (1 to 100) execution time: {(end_time - start_time) * 1000:.6f} ms")
